
#####################
## Incident Review
#####################
[incident_review]
args =
definition = inputlookup append=T incident_review_lookup | rename user as reviewer | `get_realname(owner)` | `get_realname(reviewer)` | eval nullstatus=if(isnull(status),"true","false") | `get_reviewstatuses` | eval status=if((isnull(status) OR isnull(status_label)) AND nullstatus=="false",0,status) | eval status_label=if(isnull(status_label) AND nullstatus=="false","Unassigned",status_label) | eval status_description=if(isnull(status_description) AND nullstatus=="false","unknown",status_description) | eval _time=time | `uitime(time)` | fields - nullstatus
errormsg =
iseval = 0
validation =

[incident_review_analyst_capacity]
definition = 12

[incident_review_capacity]
definition = `notable_owners` | search owner!="unassigned" | stats count as analyst_count | eval incident_review_capacity=analyst_count*`incident_review_analyst_capacity`

## Security Domains
[security_domains]
args = 
definition = inputlookup append=T security_domain_lookup | rename label as security_domain_label
errormsg =
iseval = 0
validation =


#####################
## Notable Events
#####################

###### Correlation Searches ######
## it is imperative that we do not deduplicate MV governance/control because of their mvindex relationship to one another
[get_correlations]
args =
definition = lookup update=true correlationsearches_lookup _key as source OUTPUTNEW security_domain, severity, rule_name, description as savedsearch_description, rule_title, rule_description, drilldown_name, drilldown_search, drilldown_earliest_offset, drilldown_latest_offset, default_status, default_owner, next_steps, recommended_actions | `get_rule_title` | eval drilldown_earliest=case(isint(drilldown_earliest_offset),_time-drilldown_earliest_offset,drilldown_earliest_offset="$info_min_time$",'info_min_time',1=1,null()) | eval drilldown_latest=case(isint(drilldown_latest_offset),_time+drilldown_latest_offset,drilldown_latest_offset="$info_max_time$",'info_max_time',1=1,null()) | eval security_domain=if(isnull(security_domain),"threat",lower(security_domain)) | eval governance_lookup_type="default" | lookup update=true governance_lookup savedsearch as source, lookup_type as governance_lookup_type OUTPUT governance, control | eval governance_lookup_type="tag" | lookup update=true governance_lookup savedsearch as source, tag, lookup_type as governance_lookup_type OUTPUT governance as governance_tag, control as control_tag | eval "governance"=mvappend('governance',NULL,'governance_tag') | eval "control"=mvappend('control',NULL,'control_tag') | fields - governance_lookup_type,governance_tag,control_tag
errormsg =
iseval = 0
validation =

###### Governance ######
[governance]
args =
definition = inputlookup append=T governance_lookup | stats count by governance | fields - count
errormsg =
iseval = 0
validation =

[get_control(1)]
args = value
definition = control="$value$"
errormsg =
iseval = 0
validation =

[get_governance(1)]
args = value
definition = (tag="$value$" OR governance="$value$")
errormsg =
iseval = 0
validation =

[get_governance(2)]
args = governance, control
definition = `get_governance($governance$)` `get_control($control$)`
errormsg =
iseval = 0
validation =

###### Notables ######

## Notable index name
## Use this macro to work with notable index
##
[get_notable_index]
args=
definition = index=notable

## No longer performs field renaming per CAM result2stash + makeevents()
[map_notable_fields]
definition = noop

[notable]
args =
definition = `notable_by_id("*")`

[notable(1)]
args       = search_name
definition = source="$search_name$" `notable_by_id("*")`

[notable_adhoc_invocation(3)]
args        = time, search_name, event_id
definition = _time="$time$" source="$search_name$" `notable_by_id($event_id$)` | fields - _raw,*risk_score,*risk_object,*risk_object_type

## notable_by_id(1) macro breakdown
## 1   - Search notable index
## 2   - Get event_hash/event_id
## 3   - Optionally filter event_id
## 4   - Remove host fields (they will always reflect local Splunk server name)
## 5   - Get tags
## 6   - Append orig_tag to tag
## 7   - Get rule_id and dedup
## 8   - Get correlations
## 9   - Get review status
## 10  - Get owner
## 11  - Get urgency
## 12  - Get rule description
## 13  - Fill some nulls
## 14  - Event typing
## 15  - Get tags (2nd/final round)
## 16  - Append orig_tag to tag
## 17  - Suppression extraction
## 18  - Risk correlation
[notable_by_id(1)]
args       = event_id
definition = `get_notable_index` | `get_event_id` | search event_id="$event_id$" | fields - host_* | tags outputfield=tag | `mvappend_field(tag,orig_tag)` | `dedup_rule_id` | `get_correlations` | `get_current_status` | `get_owner` | `get_urgency` | `get_rule_description` | fillnull value=unknown rule_name,security_domain | typer | tags outputfield=tag | `mvappend_field(tag,orig_tag)` | `suppression_extract` | `risk_correlation`

###### Owner ######
[notable_owners]
args = 
definition = inputlookup append=T notable_owners_lookup | rename realname as owner_realname | eval owner_realname=if(isnull(owner_realname),owner,owner_realname) | sort + owner_realname
errormsg =
iseval = 0
validation =

## get_owner breakdown
## 1 - Determine status based on:
##     a.  Owner assignment in incident_review.csv
##     b.  Default owner provided via correlationsearches_lookup
## 2 - If owner is still null set to "unassigned"
## 3 - Lookup owner's realname
## 4 - Lookup creator's realname
[get_owner]
definition = eval owner=case(isnotnull(owner),owner,isnotnull(default_owner),default_owner,1=1,"unassigned") | `get_realname(owner)` | `get_realname(creator)`

###### Rule Description ######

## get_rule_description breakdown
## 1 - If rule_description does not exist; set as savedsearch_description
## 2 - If savedsearch description does not exist; set as unknown
[get_rule_description]
definition = eval rule_description=case(isnotnull(rule_description),rule_description,isnotnull(savedsearch_description),savedsearch_description,1=1,"unknown")

###### Rule ID ######
[get_rule_id(1)]
args       = fields
definition = eval rule_id='$fields$'

[dedup_rule_id]
definition = eval rule_id=case(isnotnull(rule_id),rule_id,isnotnull(event_id),event_id,1=1,"unknown") | dedup rule_id

###### Rule Title ######

## get_rule_title breakdown
## 1 - if rule_name does not exist; set as source
## 2 - If rule_title does not exist; set as rule_name
[get_rule_title]
args =
definition = eval rule_name=if(isnull(rule_name),source,rule_name) | eval rule_title=if(isnull(rule_title),rule_name,rule_title)
errormsg =
iseval = 0
validation =

###### Statuses ######
[reviewstatuses]
definition = inputlookup append=T reviewstatuses_lookup | rename label as status_label,description as status_description | `reviewstatus_exclusions`

## get_reviewstatuses breakdown
## 1  - set temp_status=-1 ifnull (system default)
## 1a - prevents issues with _key as status OUTPUT status 
## 2  - get reviewstatus information
## 3  - if no match set status* to unassigned
## 4  - string to bool status_default
## 5  - string to bool status_end
## 6  - compute status_group
## 7  - remove temp_status
[get_reviewstatuses]
definition = eval temp_status=if(isnull(status),-1,status) | lookup update=true reviewstatuses_lookup _key as temp_status OUTPUT status,label as status_label,description as status_description,default as status_default,end as status_end | eval status=if(isnull(status_label),0,status),status_label=if(isnull(status_label),"Unassigned",status_label),status_description=if(isnull(status_description),"unknown",status_description) | `str_to_bool(status_default)` | `str_to_bool(status_end)` | eval status_group=case(status_default=="true","New",status_end=="true","Closed",status=0,"New",1=1,"Open") | fields - temp_status

[reviewstatus_exclusions]
definition = search _key!=-1 NOT ((disabled=1 OR disabled=t OR disabled=true) AND (hidden=1 OR hidden=t OR hidden=true)) 

## get_current_status breakdown
## 1  - Create temp_time from _time
## 2  - Set _time now+1d
## 3  - Perform temporal OUTPUT lookup for owner/urgency/status as new_owner/new_urgency/new_status respectively (max_matches=1)
## 4  - Perform temporal OUTPUT lookup for review_time/reviewer/comment (max_matches=50)
## 5  - Determine whether to take on a new_owner or not
## 6  - Determine whether to take on a new_status,default_status or not
## 7  - Determine whether to take on a new_urgency or not
## 8  - Set _time back
## 9  - Remove temp_time,new_owner,new_urgency,new_status
## 10 - Get reviewstatus info (label, description, status_group, etc.)
[get_current_status]
definition = eval temp_time=_time | eval _time=time()+86400 | lookup update=true incident_review_lookup rule_id OUTPUT owner as new_owner, urgency as new_urgency, status as new_status | lookup update=true incident_review_comment_lookup rule_id OUTPUT time as review_time,user as reviewer,comment | eval owner=if(isnotnull(new_owner),new_owner,owner) | eval status=case(isnotnull(new_status),new_status,isnotnull(status),status,1==1,default_status) | eval urgency=if(isnotnull(new_urgency),new_urgency,urgency) | eval _time=temp_time | fields - temp_time,new_owner,new_status,new_urgency | `get_reviewstatuses`

[reviewstatus_groups]
definition = inputlookup append=T expected_status_group_lookup

[sort_reviewstatus_groups]
definition =  eval sortorder=case(status_group=="New",1,status_group=="Open",2,status_group=="Closed",3) | sort sortorder | fields - sortorder

###### Suppression ######
[suppression_extract]
args =
definition = eval sv_eventtype=mvjoin(eventtype, "|") | rex field=sv_eventtype "notable_suppression-(?<suppression>[^|]+)" | fields - sv_eventtype
errormsg =
iseval = 0
validation =

[get_suppression_start_time]
definition = rex field=search "_time>=?(?<start_time>\d+)"

[get_suppression_end_time]
definition = rex field=search "_time<=?(?<end_time>\d+)"

[suppression]
args =
definition = (eventtype=notable_suppression-* OR suppression=*)
errormsg =
iseval = 0
validation =

[suppression_audit]
args =
definition = eventtype=suppression_audit | fillnull value=unknown suppression, action, status, signature, user
errormsg =
iseval = 0
validation =

[suppression_audit-expired]
args =
definition = eventtype=suppression_audit-expired | fillnull value=unknown signature,suppression
errormsg =
iseval = 0
validation =

[suppression_eventtypes]
definition = rest splunk_server=local count=0 /services/saved/eventtypes | search title=notable_suppression* | rename title as eventtype | `suppression_extract` | `get_suppression_start_time` | `get_suppression_end_time`

[suppressed_notables]
args = 
definition = `suppressed_notables("*")`
errormsg =
iseval = 0
validation =

[suppressed_notables(1)]
args = search_name
definition = `notable($search_name$)` | search `suppression`
errormsg =
iseval = 0
validation =


######################
## Risk
######################
[risk_correlation]
definition = `risk_correlation_assets("host")` | `risk_correlation_assets("orig_host")` | `risk_correlation_assets("dvc")` | `risk_correlation_assets("src")` | `risk_correlation_assets("dest")` | `risk_correlation_identities("src_user")` | `risk_correlation_identities("user")` | eval `risk_correlation_object_types_meval`,`risk_correlation_score_meval`

[risk_correlation_assets(1)]
args       = subject
definition = lookup update=true risk_correlation_by_system_lookup risk_object as "$subject$" OUTPUTNEW risk_score as "$subject$_risk_score"
errormsg   = subject (arg1) must be one of: host, orig_host, src, dest, or dvc
iseval     = 0
validation = subject=="host" OR subject=="orig_host" OR subject=="src" OR subject=="dest" OR subject=="dvc"

[risk_correlation_identities(1)]
args       = user
definition = lookup update=true risk_correlation_by_user_lookup risk_object as "$user$" OUTPUTNEW risk_score as "$user$_risk_score"
errormsg   = user (arg1) must be one of: src_user or user
iseval     = 0
validation = user=="src_user" OR user=="user"

[risk_correlation_object_type_meval(2)]
args       = field, value
definition = "$field$_risk_object_type"=if(isnotnull('$field$_risk_score'),"$value$",null())

[risk_correlation_object_types_meval]
definition = `risk_correlation_object_type_meval(host,"system")`,`risk_correlation_object_type_meval(orig_host,"system")`,`risk_correlation_object_type_meval(dvc,"system")`,`risk_correlation_object_type_meval(src,"system")`,`risk_correlation_object_type_meval(dest,"system")`,`risk_correlation_object_type_meval(src_user,"user")`,`risk_correlation_object_type_meval(user,"user")`

[risk_correlation_score]
definition = eval `risk_correlation_score_meval`

[risk_correlation_score_meval]
definition = risk_score=max(host_risk_score,orig_host_risk_score,dvc_risk_score,src_risk_score,dest_risk_score,src_user_risk_score,user_risk_score)

[risk_object_types]
definition = inputlookup risk_object_types_lookup


######################
## Threat Intelligence
######################
[alexa_lookup]
definition = `alexa_lookup(src)` | `alexa_lookup(dest)`

[alexa_lookup(1)]
args = infield
definition = lookup local=true alexa_lookup_by_str domain AS "$infield$" OUTPUTNEW rank AS "$infield$_rank"

[bogonlist_lookup]
definition = `bogonlist_lookup(src)` | `bogonlist_lookup(dest)`

[bogonlist_lookup(1)]
args = infield
definition = lookup local=true bogonlist_lookup_by_cidr ip AS "$infield$" OUTPUTNEW is_bogon AS "$infield$_is_bogon",is_internal AS "$infield$_is_internal"

## truncate_domain(1) breakdown
## This macro truncates a domain to the length as defined in the Mozilla Public
## Suffix List (PSL), returning the registrable portion of the domain. The lookup table
## mozilla_publix_suffix_lookup must be defined for this to work, and the lookup
## table must be specially constructed. This emulates a wildcard lookup. 
## 1  - Split the domain field.
## 2  - Retrieve the right-most segment of the domain.
## 3  - Retrieve the two right-most segments of the domain.
## 4  - Retrieve the three right-most segments of the domain.
## 5  - Retrieve the four right-most segments of the domain.
## 6  - Force local operations since mozilla lookups aren't replicated OOTB.
## 7  - Run a string-based lookup on each segment group of the domain and retrieve
##      the number of segments that constitute the registrable portion. Depending
##      on whether the rule in the PSL is a wildcard rule, normal rule, or
##      exception rule, the registrable segment length may exceed the length 
##      of the matched segment by 2, 1, or 0, respectively.
## 8  - Perform a lookup on the right-most segment to determine whether this is
##      a valid TLD.
## 9 -  Obtain the domain length. This is the logic:
##      i. If a segment group matched the lookup, take the longest match.
##      ii. If this is an IP:
##          - if IPs are allowed, set length to 4
##          - else set to 0
##      iii. If no segments matched, this might be an "unlisted" TLD.
##          - If unlisted, set length to 2 as single-word domain names are not allowed.
##          - If this IS a TLD, it might be a TLD for which two-level domains are
##            no registrable (cf. ".cy", ".za"). Set length to 0.
## 10  - Get the number of segments in the original domain.
## 11 - If the number of segments in the original domain is greater than or 
##      equal to the registrable length, assign it to $target$; otherwise return
##      null as this is not a valid domain name.
## 12 - Remove extraneous fields.
##
## Note: By default, IP addresses are disallowed. To permit IP addresses to be 
## treated as domain names, set `truncate_domain_allows_ips`==0 below. This will
## permits the WHOIS data collection mechanisms to maintain records of IP addresses
## that are unresolvable but for which other domain intelligence might be 
## retrievable.
[truncate_domain(2)]
args = source,target
definition = eval SEGMENTS=split(ltrim('$source$', "."), ".") | eval SEG1=mvindex(SEGMENTS, -1) | eval SEG2 = mvjoin(mvindex(SEGMENTS, -2, -1), ".") | eval SEG3 = mvjoin(mvindex(SEGMENTS, -3, -1), ".") | eval SEG4 = mvjoin(mvindex(SEGMENTS, -4, -1), ".") | lookup update=true mozilla_public_suffix_lookup domain AS SEG1 OUTPUTNEW length AS SEG1_LENGTH | lookup update=true mozilla_public_suffix_lookup domain AS SEG2 OUTPUTNEW length AS SEG2_LENGTH | lookup update=true mozilla_public_suffix_lookup domain AS SEG3 OUTPUTNEW length AS SEG3_LENGTH | lookup update=true mozilla_public_suffix_lookup domain AS SEG4 OUTPUTNEW length AS SEG4_LENGTH | lookup update=true cim_http_tld_lookup tld AS SEG1 OUTPUT tld AS TLD | eval TGT_LENGTH = coalesce(SEG4_LENGTH,SEG3_LENGTH,SEG2_LENGTH,SEG1_LENGTH, if(cidrmatch("0.0.0.0/0", '$source$'), if(`truncate_domain_allows_ips`==0, 4, 0), if(isnull(TLD), 2, 0))) | eval SRC_LENGTH=mvcount(SEGMENTS) | eval "$target$"=if(TGT_LENGTH==0, null, if(SRC_LENGTH>=TGT_LENGTH, mvjoin(mvindex(SEGMENTS, -TGT_LENGTH, -1), "."), null)) | fields - TLD SEG1 SEG2 SEG3 SEG4 SEG1_LENGTH SEG2_LENGTH SEG3_LENGTH SEG4_LENGTH TGT_LENGTH SRC_LENGTH SEGMENTS

[truncate_domain(1)]
args = source
definition = `truncate_domain($source$, $source$)`

## Change to anything except 0 to disallow IP addresses in truncate_domain
## output. 
[truncate_domain_allows_ips]
definition = 1

## truncate_domain_dedup(2) breakdown
## 1 - Run truncate_domain on the input field.
## 2 - If the result field name is identical to the source field name, or the
##     result value itself is identical to the source field value, set the 
##     truncated domain to null. This prevents lookups that might target the 
##     $source$_domain field from running twice
[truncate_domain_dedup(1)]
args = source
definition = `truncate_domain_dedup($source$, $source$)`

[truncate_domain_dedup(2)]
args = source,target
definition = `truncate_domain($source$, $target$_domain)` | eval "$target$_domain"=if("$target$_domain"="$source$" OR '$target$_domain'='$source$', null(), '$target$_domain')

###### Urgency ######

## get_priority breakdown
## 1 - Create a MV priorities field out of known priority fields
## 2 - Convert MV priorities field into SV priorities field
## 3 - Convert prorities to lower
## 4 - Run priorities through prioritizer lookup to determine highest priority
## 5 - Remove priorities field
## 6 - Fillnull priority
[get_priority]
definition = eval priorities=lower(mvappend(priority, host_priority, orig_host_priority, src_priority, dest_priority, dvc_priority, src_user_priority, user_priority, host_owner_priority, orig_host_owner_priority, src_owner_priority, dest_owner_priority, dvc_owner_priority)) | eval priority=case(priorities="critical", "critical", priorities="high", "high", priorities="medium", "medium", priorities="low", "low", priorities="informational", "informational", 1==1, "unknown") | fields - priorities

[urgency]
args =
definition = inputlookup append=T urgency_lookup
errormsg =
iseval = 0
validation =

## get_urgency breakdown
## 1 - Fillnull severity
## 2 - Convert severity to lower
## 2 - Get priority
## 3 - Perform urgency lookup based on OUTPUTNEW (will only override if urgency does not exist)
## 4 - Urgency should never be unknown based on lookup, but fillnull just in case
[get_urgency]
args =
definition = fillnull value=unknown severity | `lower(severity)` | `get_priority` | lookup local=true urgency_lookup priority,severity OUTPUTNEW urgency | fillnull value=unknown urgency
errormsg =
iseval = 0
validation =
