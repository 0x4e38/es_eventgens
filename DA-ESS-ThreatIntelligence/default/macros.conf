
## Input all threat intelligence collections
[all_threat_intel]
definition = `email_intel` | `file_intel` | `process_intel` | `registry_intel` | `service_intel` | `user_intel` | `http_intel` | `ip_intel` | `certificate_intel`

[all_threat_intel_stats]
definition = `all_threat_intel` | stats [| rest splunk_server=local count=0 /services/admin/macros search="name=*_intel_stats NOT name=all_threat_intel_stats" | `makemv(definition,",")` | stats values(definition) as search | `makesv(search,",")`] | addtotals fieldname=count | table count

[all_threat_intel_stats_by_threat_key]
definition = `all_threat_intel` | stats [| rest splunk_server=local count=0 /services/admin/macros search="name=*_intel_stats NOT name=all_threat_intel_stats" | `makemv(definition,",")` | stats values(definition) as search | `makesv(search,",")`] by threat_key | addtotals fieldname=count | table threat_key,count

[set_threat_collection_name(1)]
args       = string
definition = eval threat_collection=if(isnull(threat_collection),"$string$",threat_collection)

## zips and expands MV threat matches
## 1. Combine threat_collection/threat_collection_key/threat_key/weight into intelzip
## 2. Remove the fields just combined as they will be extracted later
## 3. mvexpand intelzip
## 4. Extract threat_collection/threat_collection_key/threat_key/weight from intelzip
## 5. Ensure weight is a number
## 6. Remove intelzip
[zipexpand_threat_matches]
definition = eval intelzip=mvzip(threat_collection,threat_collection_key,"@@"), intelzip=mvzip(intelzip,threat_key,"@@"), intelzip=mvzip(intelzip,weight,"@@") | fields - threat_collection,threat_collection_key,threat_key,weight | mvexpand intelzip | rex field=intelzip "(?<threat_collection>.+?)@@(?<threat_collection_key>.+?)@@(?<threat_key>.+?)@@(?<weight>.+)" | eval weight=if(isnum(weight),weight,null()) | fields - intelzip

## Performs a series of threat intelligence lookups on a "system" field
## 1.  Perform threat_intel_by_system (string, ip)
## 2.  Perform threat_intel_by_cidr (cidr)
## 3.  Perform threat_intel_by_domain (domains)
## 4.  Perform threat_intel_by_domain (truncated domains)
## 5.  Set threat match field
## 6.  Set threat match value
[threatintel_multilookup(1)]
args       = field
definition = lookup update=true threatintel_by_system system as "$field$" OUTPUTNEW | lookup update=true threatintel_by_cidr cidr as "$field$" OUTPUTNEW | `threatintel_domain_lookup($field$)` | eval threat_match_field=case(isnotnull(threat_match_field),threat_match_field,isnotnull('$field$') AND isnotnull(threat_collection_key),"$field$",1=1,threat_match_field) | eval threat_match_value=case(isnotnull(threat_match_value),threat_match_value,isnotnull('$field$') AND isnotnull(threat_collection_key),'$field$',1=1,threat_match_value)

[threatintel_url_lookup(1)]
args       = url
definition = lookup update=true threatintel_by_url "$url$" OUTPUTNEW | lookup update=true threatintel_by_url_wildcard "$url$" OUTPUTNEW

[threatintel_domain_lookup(1)]
args       = source
definition = `truncate_domain_dedup($source$)` | lookup update=true threatintel_by_domain domain as "$source$" OUTPUTNEW | lookup update=true threatintel_by_domain domain as "$source$_domain" OUTPUTNEW

## Threat Intelligence Outputlookup
[threatintel_outputlookup(1)]
args       = field
definition = `threatintel_outputlookup("$field$","threatintel_by_$field$")`

[threatintel_outputlookup(2)]
args       = field,collection
definition = `get_threat_download_status` | `threatintel_outputlookup_exclusions` | mvexpand "$field$" | rename _key as threat_collection_key | dedup "$field$",threat_collection_key,threat_key | where isnotnull('$field$') AND NOT ('$field$' LIKE "*%" OR '$field$' LIKE "%*") | fillnull value="X" weight | table "$field$",threat_collection,threat_collection_key,threat_key,weight | outputlookup $collection$ | stats count

[threatintel_outputlookup_wildcard(1)]
args       = field
definition = `threatintel_outputlookup_wildcard("$field$","threatintel_by_$field$_wildcard")`

[threatintel_outputlookup_wildcard(2)]
args       = field,collection
definition = `get_threat_download_status` | `threatintel_outputlookup_exclusions` | mvexpand "$field$" | rename _key as threat_collection_key | dedup "$field$",threat_collection_key,threat_key | where isnotnull('$field$') AND ('$field$' LIKE "*%" OR '$field$' LIKE "%*") | fillnull value="X" weight | table "$field$",threat_collection,threat_collection_key,threat_key,weight | outputlookup $collection$ | stats count

[threatintel_outputlookup_exclusions]
definition = where NOT match(disabled, "1|[Tt]|[Tt][Rr][Uu][Ee]")


###### Certificate Intelligence ######
[certificate_intel]
definition = inputlookup append=T certificate_intel | `set_threat_collection_name("certificate_intel")` | mvexpand certificate_serial | `get_certificate_serial` | eventstats values(certificate_serial) as certificate_serial,values(certificate_serial_clean) as certificate_serial_clean,values(certificate_serial_dec) as certificate_serial_dec by _key | dedup _key | `get_threat_attribution_weight(threat_key)`

## Key Fields: certificate_serial, certificate_issuer_common_name, certificate_issuer_email, certificate_issuer_organization, certificate_issuer_unit, certificate_subject_common_name, certificate_subject_email, certificate_subject_organization, certificate_subject_unit, certificate_file_hash, ip, domain
[certificate_intel_stats]
definition = dc(certificate_serial),dc(certificate_issuer_common_name),dc(certificate_issuer_email),dc(certificate_issuer_organization),dc(certificate_issuer_unit),dc(certificate_subject_common_name),dc(certificate_subject_email),dc(certificate_subject_organization),dc(certificate_subject_unit),dc(certificate_file_hash),dc(ip),dc(domain)

[get_certificate_serial]
definition = rex field=certificate_serial ".*(?<certificate_serial>0x.*[a-fA-F0-9]).*" | rex mode=sed field=certificate_serial "s/\([Nn]egative\)/-/g" | eval certificate_serial=case(match(certificate_serial,"^[+]\d+$"),substr(certificate_serial,2),match(certificate_serial,"^[-]?\d+$"),certificate_serial,match(certificate_serial,"^[+][a-fA-F0-9]+(?:\:|$)"),"0x".substr(certificate_serial,2),match(certificate_serial,"^[a-fA-F0-9]+(?:\:|$)"),"0x".certificate_serial,match(certificate_serial,"^[-][a-fA-F0-9]+(?:\:|$)"),"-0x".substr(certificate_serial,2),1=1,certificate_serial) | eval certificate_serial_dec=if(match(certificate_serial,"^[-]?\d+$"),certificate_serial,certificate_serial_dec) | eval certificate_serial=if(isnotnull(certificate_serial_dec),null(),certificate_serial) | `get_certificate_serial_clean` | lookup hex2dec hex as certificate_serial_clean OUTPUTNEW dec as certificate_serial_dec | lookup hex2dec dec as certificate_serial_dec OUTPUTNEW hex as certificate_serial | `get_certificate_serial_clean`

[get_certificate_serial_clean]
definition = eval certificate_serial_clean=certificate_serial | rex mode=sed field=certificate_serial_clean "s/://g"


###### Email Intelligence ######

[email_intel]
definition = inputlookup append=T email_intel | `set_threat_collection_name("email_intel")` | `get_threat_attribution_weight(threat_key)`

## Key Fields: src_user, subject, file_name, file_hash, embedded_domain, embedded_ip, src
[email_intel_stats]
definition = dc(src_user),dc(subject),dc(file_name),dc(file_hash),dc(embedded_domain),dc(embedded_ip),dc(src)


###### File Intelligence ######
[file_intel]
definition = inputlookup append=T file_intel | `set_threat_collection_name("file_intel")` | `get_threat_attribution_weight(threat_key)`

## Key Field: file_hash, file_name
[file_intel_stats]
definition = dc(file_hash),dc(file_name)


###### HTTP Intelligence ######
[http_intel]
definition = inputlookup append=T http_intel | `set_threat_collection_name("http_intel")` | `get_threat_attribution_weight(threat_key)`

## Key Fields: http_user_agent, http_referrer, url, header, ip, domain
[http_intel_stats]
definition = dc(http_user_agent),dc(http_referrer),dc(url),dc(header),dc(ip),dc(domain)


###### IP Intelligence ######
[ip_intel]
definition = inputlookup append=T ip_intel | `set_threat_collection_name("ip_intel")` | `get_threat_attribution_weight(threat_key)`

## Key Fields: ip, domain
[ip_intel_stats]
definition = dc(ip),dc(domain)


###### Process Intelligence ######
[process_intel]
definition = inputlookup append=T process_intel | `set_threat_collection_name("process_intel")` | `get_threat_attribution_weight(threat_key)`

## Key Field: process, process_file_name, process_handle_name, src, dest
[process_intel_stats]
definition = dc(process),dc(process_file_name),dc(process_handle_name),dc(src),dc(dest)


###### Registry Intelligence ######
[registry_intel]
definition = inputlookup append=T registry_intel | `set_threat_collection_name("registry_intel")` | `get_threat_attribution_weight(threat_key)`

## Key Fields: registry_path, registry_value_name, registry_value_text
[registry_intel_stats]
definition = dc(registry_path),dc(registry_value_name),dc(registry_value_text)


###### Service Intelligence ######
[service_intel]
definition = inputlookup append=T service_intel | `set_threat_collection_name("service_intel")` | `get_threat_attribution_weight(threat_key)`

## Key Fields: service, service_file_hash, service_dll_file_hash
[service_intel_stats]
definition = dc(service),dc(service_file_hash),dc(service_dll_file_hash)


###### Threat Group Intel ######
[threat_group_intel]
definition = inputlookup append=T threat_group_intel | fillnull value="undefined" threat_group,threat_category

[threat_sources]
definition = `threat_group_intel` | fields source_id | dedup source_id | sort + source_id

[threat_groups]
definition = `threat_group_intel` | stats count by threat_group | fields threat_group | sort + threat_group

[threat_categories]
definition = `threat_group_intel` | stats count by threat_category | fields threat_category | sort + threat_category

[get_threat_attribution(1)]
args       = key
definition = lookup update=true threat_group_intel _key as "$key$" OUTPUT | fillnull value="undefined" threat_group,threat_category

[get_threat_attribution_weight(1)]
args       = key
definition = lookup update=true threat_group_intel _key as "$key$" OUTPUTNEW weight

[get_threat_download_status]
definition = rex field=threat_key ".*?\|(?<threatlist_title>.+)_TAXII" | eval threatlist_title=if(isnull(threatlist_title),threat_key,threatlist_title) | join type=outer threatlist_title [| rest splunk_server=local count=0 /services/data/inputs/threatlist | rename title as threatlist_title | table threatlist_title, disabled] | fields - threatlist_title

[filter_by_threat_group(2)]
args       = field,value
definition = `threat_group_intel` | search threat_group="$value$" | rename _key as "$field$" | table "$field$" | format

[filter_by_threat_category(2)]
args       = field,value
definition = `threat_group_intel` | search threat_category="$value$" | rename _key as "$field$" | table "$field$" | format

###### Threat Intelligence Retention ######

# Filters out "old" threat intelligence using the value defined for "max_age" in
# the threatlist's inputs.conf stanza. 
#
# Breakdown:
# 1. Issue search, deriving the search clause from the subsearch.
# 2. REST call to get inputs.conf stanzas.
# 3. Filter out legacy threatlist inputs.conf stanzas which are never 
#    used to populate threat intelligence collections.
# 4. Obtain the max_age setting.
#    a. If null, set to zero.
#    b. If real-time, set to zero.
#    c. Otherwise, regard as a relative time string, e.g., "-7d".
# 5. Construct search string for each result that will find threat intelligence
#    with the same "threat_key" value and "time" value less than the max_age.
# 6. Drop extraneous fields.
# 7. Combine the results into a single MV field.
# 8. Join the results by "OR".
# 9. Prefix the results with "NOT".
# 10. If we have no results, set the clause to the empty string.
# 11. Return the single result, which will be used in the subsearch.
[filter_by_threat_age]
definition = search [| rest splunk_server=local count=0 /services/data/inputs/threatlist | `filter_legacy_threatlist_types` | eval max_age=case(isnull(max_age), 0, like(max_age, "%rt%"), 0, 1==1, tonumber(relative_time(now(), max_age))) | where isnum(max_age) AND max_age>0 | eval searchstring="(threat_key=\"".title."\" time<".max_age.")" | fields searchstring | mvcombine searchstring | eval searchstring=mvjoin(searchstring, " OR ") | eval searchstring="NOT (".searchstring.")" | eval searchstring=if(searchstring=="NOT ()", "", searchstring)| return $searchstring]

[filter_legacy_threatlist_types]
definition = where type!="tld" AND type!="alexa" AND type!="asn" AND type !="mozilla_psl" 

[filter_threatintel_collection(1)]
args = collection
definition = inputlookup $collection$ | `filter_by_threat_age` | outputlookup $collection$ | stats count


###### User Intelligence ######
[user_intel]
definition = inputlookup append=T user_intel | `set_threat_collection_name("user_intel")` | `get_threat_attribution_weight(threat_key)`

## Key Fields: user
[user_intel_stats]
definition = dc(user)
