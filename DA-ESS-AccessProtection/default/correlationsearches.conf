
#####################
## Authentication
#####################
[Access - Concurrent App Accesses - Rule]
security_domain     = access
severity            = medium
rule_name           = Concurrent Login Attempts Detected
description         = Alerts on concurrent access attempts to an app from different hosts. These are good indicators of shared passwords and potential misuse.
rule_title          = Concurrent Access Event Detected For $user$
rule_description    = Concurrent access attempts to $app1$ by $user$ from two different sources( $src1$, $src2$ ) have been detected.
nes_fields          = user
drilldown_name      = View access attemps by $user$
drilldown_search    = | datamodel Authentication Authentication search | search Authentication.user="$user$"
default_owner       =
default_status      =

[Access - Geographically Improbable Access Detected - Rule]
security_domain     = access
severity            = high
rule_name           = Geographically Improbable Access Detected
description         = Alerts on access attempts that are improbably based on time and geography.
rule_title          = Geographically Improbable Access Detected For $user$
rule_description    = Login attempts for $user$ from geographically distant locations ( $session_city$, $prev_city$ ) have been detected.  This is an indication of potentially malicious or unauthorized access attempts.
nes_fields          = user
drilldown_name      = View login attemps by $user$
drilldown_search    = | datamodel Authentication Authentication search | search Authentication.user="$user$"
default_owner       =
default_status      =

[Access - High or Critical Priority Individual Logging into Infected Machine - Rule]
security_domain  = access
severity         = critical
rule_name        = High or Critical Priority Individual Logging into Infected Machine
description      = Detects users with a high or critical priority logging into a malware infected machine
rule_title       = High or Critical Priority User Accessed Machine Infected with Malware
rule_description = $user$ accessed $dest$ which is infected with $signature$
nes_fields       = dest
drilldown_name   = View successful authentication attempts on infected system $dest$
drilldown_search = | datamodel Authentication Successful_Authentication search | where ('Authentication.user_priority'="high" OR 'Authentication.user_priority'="critical") AND 'Authentication.dest'="$dest$"
default_status   =
default_owner    = 

## commenting guided mode for now, because multiple search parts not implemented in gui
#search           = {\
#    "version":  "1.0",\
#    "searches": [\
#        {"key":          "dest",\
#         "datamodel":    "Authentication",\
#         "object":       "Successful_Authentication",\
#         "earliest":     "-65m@m",\
#         "latest":       "-5m@m",\
#         "eventFilter":  "('Authentication.user_priority'=\"high\" OR 'Authentication.user_priority'=\"critical\")",\
#         "aggregates":   [{"function": "values", "attribute": "Authentication.user", "alias": "user"}],\
#         "splitby":      [{"attribute": "Authentication.dest", "alias": "dest"}]\
#        },\
#        {"key":          "dest",\
#         "datamodel":    "Malware",\
#         "object":       "Allowed_Malware",\
#         "earliest":     "-24h",\
#         "latest":       "+0s",\
#         "aggregates":   [{"function": "values", "attribute": "Malware_Attacks.signature", "alias": "signature"}],\
#         "splitby":      [{"attribute": "Malware_Attacks.dest", "alias": "dest"}]\
#        }\
#    ],\
#    "alert.suppress":         "1",\
#    "alert.suppress.fields":  ["dest"]\
#}


#####################
## Account Management
#####################
[Access - Short-lived Account Detected - Rule]
security_domain  = access
severity         = high
rule_name        = Short-lived Account Detected
description      = Detects when a account or credential is created and then removed a short time later. This may be an indication of malicious activities.
rule_title       = Short-lived Account Detected ($user$)
rule_description = Account $user$ on $dest$ created and deleted within $timestr$
nes_fields       = user
drilldown_name   = View account change events of $user$
drilldown_search = | `datamodel("Change_Analysis", "Account_Management")` | search All_Changes.user="$user$" (All_Changes.action="created" OR All_Changes.action="deleted")
default_owner    = 
default_status   = 
search           =
