
#####################
## Global
#####################

###### Correlation Searches ######
[Network - Policy Or Configuration Change - Rule]
action.email.sendresults            = 0
action.risk                         = 1
action.risk.param._risk_object      = dvc
action.risk.param._risk_object_type = system
action.risk.param._risk_score       = 60
action.notable                      = 1
## action.summary_index._name present for migration purposes
action.summary_index._name          = notable
alert.digest_mode                   = 1
alert.suppress                      = 1
alert.suppress.fields               = dvc,command
alert.suppress.period               = 86300s
alert.track                         = false
cron_schedule                       = */5 * * * *
disabled                            = True
dispatch.earliest_time              = rt-5m@m
dispatch.latest_time                = rt+5m@m
dispatch.rt_backfill                = 1
enableSched                         = 1
is_visible                          = false
search                              = | datamodel "Change_Analysis" "Network_Changes" search | stats max(_time) as "lastTime",latest(_raw) as "orig_raw",count by "All_Changes.dvc","All_Changes.action","All_Changes.command" | rename "All_Changes.dvc" as "dvc","All_Changes.action" as "action","All_Changes.command" as "command"

###### Lookup Generating Searches ######

## Network - Source And Destination Tracker - Lookup Gen Breakdown
## 1-3 - get unique src/dest combinations from datamodels
##   4 - renames
##   5 - stats
##   6 - input existing
##   7 - stats
##   8 - filter action==unknown
##   9 - write lookup
##  10 - purge results
[Network - Source And Destination Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 25 * * * *
disabled                 = True
description              = Maintains a list of Source and Destination pairs and the first and last time they were seen
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | `tstats` values(All_Traffic.action),values(sourcetype),min(_time),max(_time) from datamodel=Network_Traffic.All_Traffic by All_Traffic.src,All_Traffic.dest | `tstats` append=true values(Intrusion_Detection.action),values(sourcetype),min(_time),max(_time) from datamodel=Intrusion_Detection.IDS_Attacks by IDS_Attacks.src,IDS_Attacks.dest | `tstats` append=true values(Web.action),values(sourcetype),min(_time),max(_time) from datamodel=Web.Web by Web.src,Web.dest | rename All_Traffic.* as *,*All_Traffic.action as *action,Intrusion_Detection.* as *,*Intrusion_Detection.action as *action,Web.* as *,*Web.action as *action | stats values(action) as action,values(sourcetype) as sourcetype,min(_time) as firstTime,max(_time) as lastTime by src,dest | inputlookup append=T src_dest_tracker | stats values(action) as action,values(sourcetype) as sourcetype,min(firstTime) as firstTime,max(lastTime) as lastTime by src,dest | eval action=mvfilter(action!="unknown") | outputlookup src_dest_tracker | stats count


#####################
## Certificates
#####################
[Network - Certificate Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 50 * * * *
disabled                 = True
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats min(_time) as firstTime,max(_time) as lastTime from datamodel=Certificates.All_Certificates where nodename=All_Certificates.SSL by All_Certificates.SSL.ssl_serial,All_Certificates.SSL.ssl_hash,All_Certificates.SSL.ssl_subject,All_Certificates.SSL.ssl_issuer | rename All_Certificates.SSL.ssl* as certificate* | inputlookup append=T certificate_tracker | stats min(firstTime),max(lastTime) by certificate_serial,certificate_hash,certificate_subject,certificate_issuer | rename certificate* as ssl* | extract cim_ssl_issuer_common_name,cim_ssl_issuer_email,cim_ssl_issuer_unit,cim_ssl_subject_common_name,cim_ssl_subject_email,cim_ssl_subject_unit | rename ssl* as certificate* | outputlookup certificate_tracker | stats count


#####################
## Firewall
#####################

###### Base Searches ######
[Network - All Communication - Base]
action.postprocess = 0
enableSched        = 0
is_visible         = false
search             = `communicate` | table _time,sourcetype,action,bytes,dvc,dvc_bunit,dvc_category,dvc_pci_domain,rule,transport,src,src_bunit,src_category,src_pci_domain,src_port,dest,dest_bunit,dest_category,dest_pci_domain,dest_port,vendor_product,tag

##### Context-updating searches #####
[Network - Port Activity By Destination Port - Context Gen]
# To recreate from scratch use: | makeresults | eval size=250 | eval count=0 | eval median=1000 | xsCreateDDContext name=count_by_dest_port_1d container=network_traffic type=median_centered terms="minimally,slightly,moderately,greatly,extremely" width=3 scope=app app=SA-NetworkProtection
action.email.sendresults = 0
cron_schedule            = 0 3 * * *
disabled                 = true
dispatch.earliest_time   = -30d@d
dispatch.latest_time     = -1d@d
enableSched              = 1
is_visible               = false
schedule_window          = 10
search                   = | tstats `summariesonly` count as dest_port_traffic_count from datamodel=Network_Traffic.All_Traffic by All_Traffic.dest_port,_time span=1d | `drop_dm_object_name("All_Traffic")` | `context_stats(dest_port_traffic_count, dest_port)` | search size>0 | xscreateddcontext name=count_by_dest_port_1d class=dest_port container=network_traffic type=median_centered terms="minimal,low,medium,high,extreme" width=3 scope=app app=SA-NetworkProtection | stats count

# Replaces traffic_volume_tracker
[Network - Traffic Source Count Per 30m - Context Gen]
action.email.sendresults = 0
cron_schedule            = 35 * * * *
disabled                 = true
dispatch.earliest_time   = -90m@m
dispatch.latest_time     = -30m@m
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` dc(All_Traffic.src) as src_count from datamodel=Network_Traffic.All_Traffic by _time span=30m | stats count, median(src_count) as median, stdev(src_count) as size | search size>0 | xsupdateddcontext name=src_count_30m container=network_traffic terms="minimal,low,medium,high,extreme" type=median_centered width=3 app=SA-NetworkProtection scope=app | stats count

# Replaces traffic_volume_tracker
[Network - Traffic Volume Per 30m - Context Gen]
action.email.sendresults = 0
cron_schedule            = 45 * * * *
disabled                 = true
dispatch.earliest_time   = -90m@m
dispatch.latest_time     = -30m@m
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` count as total_count from datamodel=Network_Traffic.All_Traffic by _time span=30m | stats count, median(total_count) as median, stdev(total_count) as size | search size>0 | xsupdateddcontext name=count_30m container=network_traffic terms="minimal,low,medium,high,extreme" type=median_centered width=3 app=SA-NetworkProtection scope=app | stats count

[Web - Web Event Count By Src By HTTP Method Per 1d - Context Gen]
action.email.sendresults   = 0
cron_schedule              = 0 0 * * *
disabled                   = False
dispatch.earliest_time     = -31d@d
dispatch.latest_time       = -1d@d
enableSched                = 1
is_visible                 = false    
schedule_window            = 20
search                     = | tstats `summariesonly` count as web_event_count from datamodel=Web.Web by Web.src, Web.http_method, _time span=24h | `drop_dm_object_name("Web")` | `context_stats(web_event_count, http_method)` | eval min=0 | eval max=median*2 | xscreateddcontext name=count_by_http_method_by_src_1d container=web class=http_method app="SA-NetworkProtection" scope=app type=domain terms=`xs_default_magnitude_concepts` | stats count


###### Lookup Generating Searches ######

## Network - Communication Rule Tracker - Lookup Gen Breakdown
##  1-2 - get count by _time,dvc,rule,vendor_product from datamodel=Network_Traffic
##    3 - field renaming
##  4-5 - get month and year
##    6 - consolidate by month/year
##    7 - input communication_rule_tracker lookup
##    8 - consolidate results and existing lookup data
## 9-10 - recreate _time from month/year
##   11 - filter last 396 days of data
##   12 - remove unneeded fields
##   13 - write lookup
##   14 - purge results
[Network - Communication Rule Tracker - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 45 * * * *
description              = Maintains a list of Traffic rule values by device and vendor and the first and last time they were seen
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = -10m@m
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` count from datamodel=Network_Traffic.All_Traffic where All_Traffic.rule!=unknown by _time,All_Traffic.dvc,All_Traffic.rule,All_Traffic.vendor_product span=1d | `drop_dm_object_name("All_Traffic")` | convert timeformat="%m" ctime(_time) as month | convert timeformat="%Y" ctime(_time) as year | stats sum(count) as count by month,year,dvc,rule,vendor_product | inputlookup append=T communication_rule_tracker | stats sum(count) as count by month,year,dvc,rule,vendor_product | eval date=month."-01-".year | convert timeformat="%m-%d-%Y" mktime(date) as _time | `daysago(396)` | fields - _time,date,dayDiff | outputlookup communication_rule_tracker | stats count

## Network - Port And Protocol Tracker - Lookup Gen Breakdown
## 1-2 - get earliest/latest allowed traffic by transport,dest_port
##   3 - field renaming
##   4 - input port_protocol tracker
##   5 - consolidate results
##   6 - write lookup
##   7 - purge results
[Network - Port And Protocol Tracker - Lookup Gen]
action.customsearchbuilder          = 0
action.customsearchbuilder.enabled  = 1
action.customsearchbuilder.routine  = make_lookup_generating_search:makeLookupGeneratingSearch
action.customsearchbuilder.spec     = {\
    "version":      "1.0",\
    "search":       {\
	    "datamodel":     "Network_Traffic",\
	    "object":        "All_Traffic",\
        "earliest":      "-70m@m",\
        "latest":        "+0s",\
        "eventFilter":   "'All_Traffic.action'!=\"allowed\"",\
		"aggregates":    [{"function": "min", "attribute": "_time", "alias": "firstTime"},\
	                      {"function": "max", "attribute": "_time", "alias": "lastTime"}\
	                     ],\
	    "splitby":       [\
	                      {"attribute": "All_Traffic.transport", "alias": "transport"},\
	                      {"attribute": "All_Traffic.dest_port", "alias": "dest_port"}\
	                     ],\
        "summariesonly": "1",\
        "outputlookup":  "port_protocol_tracker",\
        "retention":     {\
            "earliestTime":  "-5y",\
            "timeField":     "lastTime",\
            "timeFormat":    "%s"\
        }\
    }\
}
action.email.sendresults = 0
cron_schedule            = 50 * * * *
description              = Maintains a list of allowed Traffic by unique transport protocol and destination port combination and the first and last time they were seen
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats summariesonly=true allow_old_summaries=true min(_time) as "firstTime",max(_time) as "lastTime" from datamodel=Network_Traffic.All_Traffic where    "All_Traffic.action"!="allowed" by "All_Traffic.transport","All_Traffic.dest_port"  | rename "All_Traffic.transport" as "transport","All_Traffic.dest_port" as "dest_port" | inputlookup append=T port_protocol_tracker | stats min(firstTime) as "firstTime",max(lastTime) as "lastTime" by "transport","dest_port" | where strptime('lastTime', "%s")>=relative_time(now(), "-5y") | outputlookup port_protocol_tracker | stats count

## Network - Traffic Volume History - Lookup Gen Breakdown
## 1-2 - get unique src count and count by _time span=15m
##   3 - input traffic_volume tracker
##   4 - filter last 365d of data
##   5 - order fields
##   6 - write lookup
##   7 - purge results
[Network - Traffic Volume History - Lookup Gen]
description = This savedsearch has been deprecated
enableSched = 0
is_visible  = false
search      = | tstats `summariesonly` dc(All_Traffic.src) as src_count,count from datamodel=Network_Traffic.All_Traffic by _time span=30m | inputlookup append=t traffic_volume_tracker | `daysago(365)` | fields _time,src_count,count | outputlookup traffic_volume_tracker | stats count


#####################
## IDS
#####################

###### Base Searches ######
[Network - All IDS Attacks - Base]
action.postprocess = 0
enableSched        = 0
is_visible         = false
search             = `ids_attack` | table _time,sourcetype,dvc,dvc_bunit,dvc_category,dvc_pci_domain,ids_type,category,signature,severity,src,src_bunit,src_category,src_pci_domain,dest,dest_bunit,dest_category,dest_pci_domain,vendor_product,tag

##### Context-updating searches #####
[Network - Event Count By Signature Per Hour - Context Gen]
action.email.sendresults = 0
cron_schedule            = 0 3 * * *
disabled                 = true
dispatch.earliest_time   = -61d@d
dispatch.latest_time     = -1d@d
enableSched              = 1
is_visible               = false
schedule_window          = 10
search                   = | tstats `summariesonly` count as count_by_signature_1h from datamodel=Intrusion_Detection.IDS_Attacks by _time,IDS_Attacks.signature span=1h | `drop_dm_object_name("IDS_Attacks")` | `context_stats(count_by_signature_1h, signature)` | search size>0 | xsCreateDDContext name=count_by_signature_1h class=signature container=ids_attacks type=median_centered terms="minimal,low,medium,high,extreme" scope=app app=SA-NetworkProtection | stats count

###### Correlation Searches ######
[Network - Substantial Increase in an Event - Rule]
action.email.sendresults      = 0
action.risk                   = 1
action.risk.param._risk_object      = signature
action.risk.param._risk_object_type = other
action.risk.param._risk_score       = 80
action.notable                = 1
## action.summary_index._name present for migration purposes
action.summary_index._name    = notable
alert.digest_mode             = 1
alert.suppress                = 1
alert.suppress.fields         = signature
alert.suppress.period         = 86300s
alert.track                   = false
cron_schedule                 = 15 * * * *
disabled                      = True
dispatch.earliest_time        = -1h
dispatch.latest_time          = now
enableSched                   = 1
is_visible                    = false
search                        = | tstats allow_old_summaries=true count,values(IDS_Attacks.tag) as tag from datamodel=Intrusion_Detection.IDS_Attacks by IDS_Attacks.signature | `drop_dm_object_name("IDS_Attacks")` | xswhere count from count_by_signature_1h in ids_attacks by signature is above medium

###### Lookup Generating Searches ######

## Network - IDS Attack Tracker - Lookup Gen Breakdown
## 1-2 - get the most recent ids_type,signature,vendor_product pairings from datamodel=Intrusion_Detection
##   3 - field renaming
##   4 - inputlookup existing data
##   5 - consolidate event and tracker data
##   6 - write lookup
##   7 - purge results
[Network - IDS Attack Tracker - Lookup Gen]
action.customsearchbuilder          = 0
action.customsearchbuilder.enabled  = 1
action.customsearchbuilder.routine  = make_lookup_generating_search:makeLookupGeneratingSearch
action.customsearchbuilder.spec     = {\
    "version":      "1.0",\
    "search":       {\
	    "datamodel":     "Intrusion_Detection",\
	    "object":        "IDS_Attacks",\
        "earliest":      "-70m@m",\
        "latest":        "+0s",\
        "eventFilter":   "",\
		"aggregates":    [{"function": "min", "attribute": "_time", "alias": "firstTime"},\
	                      {"function": "max", "attribute": "_time", "alias": "lastTime"}\
	                     ],\
	    "splitby":       [\
	                      {"attribute": "IDS_Attacks.ids_type", "alias": "ids_type"},\
	                      {"attribute": "IDS_Attacks.signature", "alias": "signature"},\
	                      {"attribute": "IDS_Attacks.vendor_product", "alias": "vendor_product"}\
	                     ],\
        "summariesonly": "1",\
        "outputlookup":  "ids_attack_tracker",\
        "retention":     {\
            "earliestTime":  "-5y",\
            "timeField":     "lastTime",\
            "timeFormat":    "%s"\
        }\
    }\
}
action.email.sendresults = 0
cron_schedule            = 25 * * * *
description              = Maintains a list of IDS attacks by vendor and the first and last time they were seen
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats summariesonly=true allow_old_summaries=true min(_time) as "firstTime",max(_time) as "lastTime" from datamodel=Intrusion_Detection.IDS_Attacks  by "IDS_Attacks.ids_type","IDS_Attacks.signature","IDS_Attacks.vendor_product"  | rename "IDS_Attacks.ids_type" as "ids_type","IDS_Attacks.signature" as "signature","IDS_Attacks.vendor_product" as "vendor_product" | inputlookup append=T ids_attack_tracker | stats min(firstTime) as "firstTime",max(lastTime) as "lastTime" by "ids_type","signature","vendor_product" | where strptime('lastTime', "%s")>=relative_time(now(), "-5y") | outputlookup ids_attack_tracker | stats count

## Network -  IDS Category Tracker - Lookup Gen Breakdown
## 1-2 - get the most recent category info from datamodel=Intrusion_Detection
##   3 - field renaming
##   4 - inputlookup existing data
##   5 - consolidate event and tracker data
##   6 - write lookup
##   7 - purge results
[Network - IDS Category Tracker - Lookup Gen]
action.customsearchbuilder          = 0
action.customsearchbuilder.enabled  = 1
action.customsearchbuilder.routine  = make_lookup_generating_search:makeLookupGeneratingSearch
action.customsearchbuilder.spec     = {\
    "version":      "1.0",\
    "search":       {\
	    "datamodel":     "Intrusion_Detection",\
	    "object":        "IDS_Attacks",\
        "earliest":      "-20m@m",\
        "latest":        "+0s",\
        "eventFilter":   "'IDS_Attacks.category'!=\"unknown\"",\
		"aggregates":    [{"function": "min", "attribute": "_time", "alias": "firstTime"},\
	                      {"function": "max", "attribute": "_time", "alias": "lastTime"}\
	                     ],\
	    "splitby":       [\
	                      {"attribute": "IDS_Attacks.category", "alias": "category"},\
	                      {"attribute": "IDS_Attacks.vendor_product", "alias": "vendor_product"}\
	                     ],\
        "summariesonly": "1",\
        "outputlookup":  "ids_category_tracker",\
        "retention":     {\
            "earliestTime": "-5y",\
            "timeField":    "lastTime",\
            "timeFormat":   "%s"\
        }\
    }\
}
action.email.sendresults = 0
cron_schedule            = 10,25,40,55 * * * *
description              = Maintains a list of IDS attack categoriesby vendor and the first and last time they were seen
dispatch.earliest_time   = -20m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats summariesonly=true allow_old_summaries=true min(_time) as "firstTime",max(_time) as "lastTime" from datamodel=Intrusion_Detection.IDS_Attacks where    "IDS_Attacks.category"!="unknown" by "IDS_Attacks.category","IDS_Attacks.vendor_product"  | rename "IDS_Attacks.category" as "category","IDS_Attacks.vendor_product" as "vendor_product" | inputlookup append=T ids_category_tracker | stats min(firstTime) as "firstTime",max(lastTime) as "lastTime" by "category","vendor_product" | where strptime('lastTime', "%s")>=relative_time(now(), "-5y") | outputlookup ids_category_tracker | stats count


###################
## Network Changes
###################

###### Correlation Searches ######
[Network - Network Device Rebooted - Rule]
action.email.sendresults               = 0
action.risk                            = 1
action.risk.param._risk_object         = dvc
action.risk.param._risk_object_type    = system
action.risk.param._risk_score          = 20
alert.suppress                         = 1
alert.suppress.fields                  = dvc, orig_time
alert.suppress.period                  = 86300s
alert.track                            = 0
cron_schedule                          = 20 * * * *
disabled                               = 1
dispatch.earliest_time                 = -1h@h
dispatch.latest_time                   = +0s
enableSched                            = 1
is_visible                             = false
search                                 = | tstats summariesonly=true allow_old_summaries=true count from datamodel=Change_Analysis.All_Changes where   nodename=All_Changes.Network_Changes.Device_Restarts  by "All_Changes.dvc","_time" span=1s | rename "All_Changes.dvc" as "dvc"

[Network - Substantial Increase in Port Activity (By Destination) - Rule]
action.email.sendresults            = 0
action.risk                         = 1
action.risk.param._risk_object      = dest_port
action.risk.param._risk_object_type = other
action.risk.param._risk_score       = 80
action.notable                      = 1
## action.summary_index._name present for migration purposes
action.summary_index._name          = notable
alert.digest_mode                   = 1
alert.suppress                      = 1
alert.suppress.fields               = dest_port
alert.suppress.period               = 86300s
alert.track                         = false
cron_schedule                       = 15 * * * *
disabled                            = True
dispatch.earliest_time              = -1d
dispatch.latest_time                = now
enableSched                         = 1
is_visible                          = false
search                              = | tstats allow_old_summaries=true count,values(All_Traffic.tag) as tag from datamodel=Network_Traffic.All_Traffic by All_Traffic.dest_port | `drop_dm_object_name("All_Traffic")` | xswhere count from count_by_dest_port_1d in network_traffic by dest_port is extreme

#####################
## Proxy
#####################

###### Base Searches ######
[Network - All Proxy - Base]
action.postprocess = 0
enableSched        = 0
is_visible         = false
search             = `proxy` | table _time,sourcetype,bytes_in,bytes_out,action,category,status,src,src_bunit,src_category,src_pci_domain,dest,dest_bunit,dest_category,dest_pci_domain,http_content_type,http_method,http_referrer,http_user_agent,url,url_length,user,user_bunit,user_category,tag


#####################
## Vulnerabilities
#####################

###### Base Searches ######
[Network - All Vulnerabilities - Base]
action.postprocess = 0
enableSched        = 0
is_visible         = false
search             = `vulnerability` | table _time,dest,dest_bunit,dest_category,dest_pci_domain,category,signature,cve,bugtraq,cert,msft,mskb,xref,severity,cvss,vendor_product,tag 

###### Correlation Searches ######
[Network - Vulnerability Scanner Detection (by event) - Rule]
action.email.sendresults            = 0
action.risk                         = 1
action.risk.param._risk_object      = src
action.risk.param._risk_object_type = system
action.risk.param._risk_score       = 80
action.notable                      = 1
## action.summary_index._name present for migration purposes
action.summary_index._name          = notable
alert.digest_mode                   = 1
alert.suppress                      = 1
alert.suppress.fields               = src
alert.suppress.period               = 86300s
alert.track                         = false
cron_schedule                       = */5 * * * *
disabled                            = True
dispatch.earliest_time              = rt-65m@m
dispatch.latest_time                = rt-5m@m
dispatch.rt_backfill                = 1
enableSched                         = 1
is_visible                          = false
search                              = | datamodel "Intrusion_Detection" "IDS_Attacks" search | stats values(IDS_Attacks.tag) as "tag",dc(IDS_Attacks.signature) as "count" by "IDS_Attacks.src" | rename "IDS_Attacks.src" as "src" | where 'count'>25

[Network - Vulnerability Scanner Detection (by targets) - Rule]
action.email.sendresults            = 0
action.risk                         = 1
action.risk.param._risk_object      = src
action.risk.param._risk_object_type = system
action.risk.param._risk_score       = 80
action.notable                      = 1
## action.summary_index._name present for migration purposes
action.summary_index._name          = notable
alert.digest_mode                   = 1
alert.suppress                      = 1
alert.suppress.fields               = src
alert.suppress.period               = 86300s
alert.track                         = false
cron_schedule                       = */5 * * * *
disabled                            = True
dispatch.earliest_time              = rt-65m@m
dispatch.latest_time                = rt-5m@m
dispatch.rt_backfill                = 1
enableSched                         = 1
is_visible                          = false
search                              = | datamodel "Intrusion_Detection" "IDS_Attacks" search | stats values(IDS_Attacks.tag) as "tag",dc(IDS_Attacks.dest) as "count" by "IDS_Attacks.src" | rename "IDS_Attacks.src" as "src" | where 'count'>25

###### Lookup Generating Searches ######

## Network - Vulnerability Signature Reference - Lookup Gen Breakdown
##   1-2 - get cve,bugtraq,cert,msft,mskb,xref values per signature,vendor_product
##     3 - field renaming
##     4 - read lookup
##  5-10 - make input data multi value
##    11 - consolidate results
## 12-17 - make cve,bugtraq,cert,msft,mskb,xref single value
##    18 - write lookup
##    19 - purge results
[Network - Vulnerability Signature Reference - Lookup Gen]
action.email.sendresults = 0
cron_schedule            = 20 * * * *
description              = Maintains a list of vulnerability signatures by vendor (including external reference information such as cve) and the first and last time they were seen
dispatch.earliest_time   = -70m@m
dispatch.latest_time     = +0s
enableSched              = 1
is_visible               = false
search                   = | tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime,values(Vulnerabilities.bugtraq) as bugtraq,values(Vulnerabilities.cert) as cert,values(Vulnerabilities.cve) as cve,values(Vulnerabilities.msft) as msft,values(Vulnerabilities.mskb) as mskb,values(Vulnerabilities.xref) as xref from datamodel=Vulnerabilities.Vulnerabilities by Vulnerabilities.signature,Vulnerabilities.vendor_product | `drop_dm_object_name("Vulnerabilities")` | inputlookup append=T vuln_signature_reference | `makemv(bugtraq)` | `makemv(cert)` | `makemv(cve)` | `makemv(msft)` | `makemv(mskb)` | `makemv(xref)` | stats min(firstTime) as firstTime,max(lastTime) as lastTime,values(cve) as cve,values(bugtraq) as bugtraq,values(cert) as cert,values(msft) as msft,values(mskb) as mskb,values(xref) as xref by signature,vendor_product | `makesv(bugtraq)` | `makesv(cert)` | `makesv(cve)` | `makesv(msft)` | `makesv(mskb)` | `makesv(xref)` | outputlookup vuln_signature_reference | stats count
