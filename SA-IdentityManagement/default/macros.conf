
###### Global ######
[categories]
definition = inputlookup append=T category_lookup WHERE category_source="static" | `lower(category)` | dedup category | sort + category | fields category

[get_bunit(1)]
args       = bunit
definition = (tag="$bunit$" OR bunit="$bunit$" OR ((host_bunit="$bunit$" OR host_owner_bunit="$bunit$") NOT sourcetype=stash) OR orig_host_bunit="$bunit$" OR src_bunit="$bunit$" OR dest_bunit="$bunit$" OR dvc_bunit="$bunit$" OR src_user_bunit="$bunit$" OR user_bunit="$bunit$" OR orig_host_owner_bunit="$bunit$" OR src_owner_bunit="$bunit$" OR dest_owner_bunit="$bunit$" OR dvc_owner_bunit="$bunit$")

[get_bunit_dm(2)]
args       = object, bunit
definition = ("$object$.tag"="$bunit$" OR "$object$.bunit"="$bunit$" OR (("$object$.host_bunit"="$bunit$" OR "$object$.host_owner_bunit"="$bunit$") NOT sourcetype=stash) OR "$object$.orig_host_bunit"="$bunit$" OR "$object$.src_bunit"="$bunit$" OR "$object$.dest_bunit"="$bunit$" OR "$object$.dvc_bunit"="$bunit$" OR "$object$.src_user_bunit"="$bunit$" OR "$object$.user_bunit"="$bunit$" OR "$object$.orig_host_owner_bunit"="$bunit$" OR "$object$.src_owner_bunit"="$bunit$" OR "$object$.dest_owner_bunit"="$bunit$" OR "$object$.dvc_owner_bunit"="$bunit$")

[get_category(1)]
args       = category
definition = (tag="$category$" OR category="$category$" OR ((host_category="$category$" OR host_owner_category="$category$") NOT sourcetype=stash) OR orig_host_category="$category$" OR src_category="$category$" OR dest_category="$category$" OR dvc_category="$category$" OR src_user_category="$category$" OR user_category="$category$" OR orig_host_owner_category="$category$" OR src_owner_category="$category$" OR dest_owner_category="$category$" OR dvc_owner_category="$category$")

[get_category_dm(2)]
args       = object, category
definition = ("$object$.tag"="$category$" OR "$object$.category"="$category$" OR (("$object$.host_category"="$category$" OR "$object$.host_owner_category"="$category$") NOT sourcetype=stash) OR "$object$.orig_host_category"="$category$" OR "$object$.src_category"="$category$" OR "$object$.dest_category"="$category$" OR "$object$.dvc_category"="$category$" OR "$object$.src_user_category"="$category$" OR "$object$.user_category"="$category$" OR "$object$.orig_host_owner_category"="$category$" OR "$object$.src_owner_category"="$category$" OR "$object$.dest_owner_category"="$category$" OR "$object$.dvc_owner_category"="$category$")

## make_category (from SV) macro breakdown
## 1 -  Make category a MV field
## 2 -  Repeat make_category_fromMV below
[make_category(1)]
args = category
definition = eval `makemv_meval($category$)`,"$category$"=if('$category$'=="cardholder" AND '$category$'!="pci",mvappend('$category$',"pci"),'$category$')


###### Asset Generation ######
[extra_asset_fields]
definition = is_expected, should_timesync, should_update, requires_av

[asset_attributes]
definition = owner,priority,lat,long,city,country,bunit,category,pci_domain,`extra_asset_fields`

[asset_fields]
definition = `asset_id_fields`,`asset_attributes`,asset_tag,asset_id

[asset_id_fields]
# order matters
definition = ip,mac,nt_host,dns

[asset_key_field]
definition = key

[mv_asset_fields]
# order matters
definition = category,dns,ip,mac,nt_host,pci_domain

[gen_asset_id(1)]
args = id_field
definition = strcat `asset_id_fields` $id_field$ | eval "$id_field$"=if(isnull('$id_field$'), null(), sha1('$id_field$'))

[tag_assets_meval]
definition = asset_tag=mvappend(if(should_timesync=="true", "should_timesync", null()), if(should_update=="true", "should_update", null()), if(requires_av=="true", "requires_av", null()), if(is_expected=="true", "expected", null()), category, bunit)

[pci_category_meval(1)]
args = field
definition = "$field$"=mvappend('$field$', if(('$field$' == "cardholder") and ('$field$' != "pci"), "pci", null()))

# If category == "pci", add "trust" to pci_domain
# If pci_domain in ["wireless", "dmz"], add "trust" to pci_domain
# If category == "cardholder", add "trust" and "cardholder" to pci_domain
# If pci_domain is empty, return "untrust".
[pci_domain_meval(2)]
args = domain, category
definition = "$domain$"=mvdedup(mvappend('$domain$', if(isnotnull(mvfind('$domain$', "(pci|wireless|dmz)")) or ('$category$' == "pci"), "trust", null()), if('$category$' == "cardholder", split("trust,cardholder", ","), null()))), "$domain$"=coalesce('$domain$', "untrust")

[split_mv_asset_fields]
definition = foreach `mv_asset_fields` [eval <<FIELD>>=mvdedup(split('<<FIELD>>', "|")) | eval <<FIELD>>=mvfilter(not match('<<FIELD>>', "^\s*$"))]

[generate_asset_key]
definition = eval `asset_key_field`=mvappend(`asset_id_fields`)

[make_assets_cidr]
definition = `make_assets` | eval `asset_key_field`=mvfilter(match(`asset_key_field`, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/(\d|[12]\d|3[012])$")) | where isnotnull(`asset_key_field`)

[make_assets_str]
definition = `make_assets` | eval `asset_key_field`=mvfilter(!match(`asset_key_field`, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/(\d|[12]\d|3[012])$")) | where isnotnull(`asset_key_field`)


# normalize search results to assets
# 1. fillnull for depended fields
# 2. process pipe-delimited multi-value fields
# 3. process ip-range
# 4. mvexpand multi-value fields
# 5. generate asset id
# 6. set tags for asset
# 7. set key
# 8. set lookup fields
[make_assets]
definition = fillnull value="false" `extra_asset_fields` | `split_mv_asset_fields` | `gen_asset_id(asset_id)` | dedup asset_id | where isnotnull(asset_id) | expandiprange ip | eval `pci_category_meval(category)`, `pci_domain_meval(pci_domain, category)`, `tag_assets_meval` | `generate_asset_key` | fields `asset_key_field`,`asset_fields`

[output_assets(2)]
args = app,filename
definition = outputmvcsv app="$app$" filename="$filename$" [|makeresults | foreach `asset_key_field`,`asset_fields` [eval a=mvappend(a,"<<FIELD>>")] | foreach `asset_key_field`,asset_tag,`mv_asset_fields` [eval b=mvappend(b, "<<FIELD>>")] | eval outfields=mvjoin(a, ","), mvfields=mvjoin(b, ",") | return outfields, mvfields]


###### Asset Management ######
[asset_sources]
definition = inputlookup append=t demo_asset_lookup | inputlookup append=t simple_asset_lookup

[assets]
definition = inputlookup append=T asset_lookup_by_str | inputlookup append=t asset_lookup_by_cidr | stats values(*) as * by asset_id | rename asset_tag as tag

[prepend_assets(1)]
args       = subject
definition = rename asset_id as $subject$_asset_id,ip as $subject$_ip,mac as $subject$_mac,nt_host as $subject$_nt_host,dns as $subject$_dns,owner as $subject$_owner,priority as $subject$_priority,lat as $subject$_lat,long as $subject$_long,city as $subject$_city,country as $subject$_country,bunit as $subject$_bunit,category as $subject$_category,pci_domain as $subject$_pci_domain,is_expected as $subject$_is_expected,should_timesync as $subject$_should_timesync,should_update as $subject$_should_update,requires_av as $subject$_requires_av

[unprepend_assets(1)]
args       = subject
definition = rename $subject$_asset_id as asset_id,$subject$_ip as ip,$subject$_mac as mac,$subject$_nt_host as nt_host,$subject$_dns as dns,$subject$_owner as owner,$subject$_priority as priority,$subject$_lat as lat,$subject$_long as long,$subject$_city as city,$subject$_country as country,$subject$_bunit as bunit,$subject$_category as category,$subject$_pci_domain as pci_domain,$subject$_is_expected as is_expected,$subject$_should_timesync as should_timesync,$subject$_should_update as should_update,$subject$_requires_av as requires_av

[get_asset_simple(1)]
args       = subject
definition = (dns="$subject$" OR nt_host="$subject$" OR mac="$subject$" OR ip="$subject$")

[get_asset(1)]
args       = subject
definition = `get_asset_by("str",$subject$)` | `get_asset_by("cidr",$subject$)` | lookup asset_lookup_default_fields key as $subject$ OUTPUTNEW pci_domain as $subject$_pci_domain, is_expected as $subject$_is_expected, requires_av as $subject$_requires_av, should_timesync as $subject$_should_timesync, should_update as $subject$_should_update | eval "$subject$_ip"=case(match('$subject$_ip', "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"),'$subject$_ip',match('$subject$', "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"),$subject$,1=1,null()),`mvappend_field_meval(tag,$subject$_asset_tag)`

[get_asset_by(2)]
args       = key,subject
definition = lookup update=true asset_lookup_by_$key$ key as "$subject$" OUTPUTNEW asset_id as "$subject$_asset_id",ip as "$subject$_ip",mac as "$subject$_mac", nt_host as "$subject$_nt_host",dns as "$subject$_dns",owner as "$subject$_owner",priority as "$subject$_priority",lat as "$subject$_lat",long as "$subject$_long",city as "$subject$_city",country as "$subject$_country",bunit as "$subject$_bunit",category as "$subject$_category",pci_domain as "$subject$_pci_domain",is_expected as "$subject$_is_expected",should_timesync as "$subject$_should_timesync",should_update as "$subject$_should_update",requires_av as "$subject$_requires_av",asset_tag as "$subject$_asset_tag"
errormsg   = key (arg1) must be one of: str or cidr
iseval     = 0
validation = (key=="str" OR key=="cidr")

## Global asset search
[asset_search(1)]
args       = val
definition = `get_subject("dest", $val$)` OR `get_subject("dvc", $val$)` OR `get_subject("host", $val$)` OR `get_subject("orig_host", $val$)` OR `get_subject("src", $val$)`
iseval     = false

## Asset Categories
[asset_categories]
definition = inputlookup append=T category_lookup WHERE category_source="asset" | `lower(category)` | dedup category | sort + category | fields category

## PCI Domains
[pci_domains]
definition = inputlookup append=T pci_domains_lookup WHERE pci_domain_source="static" | `lower(pci_domain)` | dedup pci_domain | sort + pci_domain | fields pci_domain

## make_pci_domain macro breakdown
## 1 -  Make pci_domain a multi-value field
## 2 -  add "trust" to pci_domain if category is "pci"
## 3 -  add "cardholder" to pci_domain if category is "cardholder"
## 4 -  add "trust" to pci_domain if pci_domain is "cardholder", "dmz", or "wireless" and "trust" was not specified
## 5 -  fill pci_domain as "untrust" if is null
[make_pci_domain(2)]
args       = pci_domain,category
definition = eval `makemv_eval($pci_domain$)`,"$pci_domain$"=if('$category$'=="pci" AND (isnull('$pci_domain$') OR '$pci_domain$'!="trust"),mvappend('$pci_domain$',"trust"),'$pci_domain$'),"$pci_domain$"=if('$category$'=="cardholder" AND (isnull('$pci_domain$') OR '$pci_domain$'!="cardholder"),mvappend('$pci_domain$',"cardholder"),'$pci_domain$'),"$pci_domain$"=if(('$pci_domain$'=="cardholder" OR '$pci_domain$'=="dmz" OR '$pci_domain$'=="wireless") AND '$pci_domain$'!="trust",mvappend('$pci_domain$',"trust"),'$pci_domain$'),"$pci_domain$"=if(isnull('$pci_domain$'),"untrust",'$pci_domain$')

[get_pci_domain(1)]
args       = domain
definition = (pci_domain="$domain$" OR (host_pci_domain="$domain$" NOT sourcetype=stash) OR orig_host_pci_domain="$domain$" OR src_pci_domain="$domain$" OR dest_pci_domain="$domain$" OR dvc_pci_domain="$domain$")

## Reverse asset lookup breakdown
## 1. Create a single event.
## 2. Set the key field to the value of the value.
## 3. Perform string-based asset lookup.
## 4. Perform CIDR-based asset lookup.
## 5. If the CIDR-based lookup returned a value, use the original input value
##    instead (it does not make sense to return a subnet for the ip field.
## 6. Eliminate the null result case.
## Note: this macro must be prepended by a pipe.
[reverse_asset_lookup(1)]
args       = value
definition = makeresults | eval key="$value$" | lookup update=true asset_lookup_by_str key OUTPUTNEW asset_id,ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av,asset_tag | lookup update=true asset_lookup_by_cidr key OUTPUTNEW asset_id,ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av,asset_tag | eval ip=case(match(ip, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"),ip,match(key, "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$"),key,1=1,null()) | where isnotnull(asset_id)


###### Identity Generation ######
[identity_attributes]
definition = prefix,nick,first,last,suffix,email,phone,phone2,managedBy,priority,bunit,category,watchlist,startDate,endDate,work_city,work_country,work_lat,work_long

[identity_key_field]
definition = key

[identity_id_fields]
# order matters
definition = identity,first,last,email

[identity_fields]
definition = `identity_id_fields`,`identity_attributes`,identity_tag,identity_id

[tag_identities_meval]
definition = identity_tag=mvappend(category, if(watchlist=="true" or watchlist==1, "watchlist", null()), bunit)

[gen_identity_id(1)]
args = id_field
definition = strcat `identity_id_fields` $id_field$ | eval "$id_field$"=if(isnull('$id_field$'), null(), sha1('$id_field$'))

[generate_identity_key]
definition = eval `identity_key_field`=identity

# normalize search results to identities
# 1. sanitize field 'watchlist'
# 2. process pipe-delimited multi-value fields
# 3. generate identity id
# 4. set tags for identity
# 5. generate identities
# 6. add key field
# 7. set lookup fields
[make_identities]
definition = fillnull value="false" watchlist | `str_to_bool(watchlist)` | eval category=split(category, "|"), `pci_category_meval(category)`, `tag_identities_meval` | `gen_identity_id(identity_id)` | where isnotnull(identity_id) | `generate_identities` | eval identity=mvdedup(identity) | `generate_identity_key` | fields `identity_key_field`,`identity_fields`

[output_identities(2)]
args = app,filename
definition = outputmvcsv app="$app$" filename="$filename$" [|makeresults | foreach `identity_key_field`,`identity_fields` [eval a=mvappend(a,"<<FIELD>>")] | foreach `identity_key_field`,identity,identity_tag,category [eval b=mvappend(b, "<<FIELD>>")] | eval outfields=mvjoin(a, ","), mvfields=mvjoin(b, ",") | return outfields, mvfields]


###### Identity Management ######
[enable_identity_management_autoupdate]
definition = true

[identity_management_timeout]
definition = 30

[identity_sources]
definition = inputlookup append=t administrative_identity_lookup | inputlookup append=t demo_identity_lookup | inputlookup append=t simple_identity_lookup

[identities]
definition = inputlookup append=T identity_lookup_expanded | rename identity_tag as tag | eval `iden_mktime_meval(startDate)`,`iden_mktime_meval(endDate)`,identity=mvsort(identity) | sort 0 + identity | table identity,`identity_attributes`

[get_identity4events(1)]
args       = username
definition = lookup update=true identity_lookup_expanded key as $username$ OUTPUTNEW identity as $username$_identity,prefix as $username$_prefix,nick as $username$_nick,first as $username$_first,last as $username$_last,suffix as $username$_suffix,email as $username$_email,phone as $username$_phone,phone2 as $username$_phone2,managedBy as $username$_managedBy,priority as $username$_priority,bunit as $username$_bunit,category as $username$_category,watchlist as $username$_watchlist,startDate as $username$_startDate,endDate as $username$_endDate,identity_tag as $username$_identity_tag,work_city as $username$_work_city,work_country as $username$_work_country,work_lat as $username$_work_lat,work_long as $username$_work_long | lookup identity_lookup_default_fields key as $username$ OUTPUTNEW watchlist as $username$_watchlist  | eval `mvappend_field_meval(tag,$username$_identity_tag)`,`iden_mktime_meval($username$_startDate)`,`iden_mktime_meval($username$_endDate)`
errormsg   = username (arg1) must be one of user, src_user, host_owner, orig_host_owner, src_owner, dest_owner, or dvc_owner
iseval     = 0
validation = username=="user" OR username=="src_user" OR username=="host_owner" OR username=="orig_host_owner" OR username=="src_owner" OR username=="dest_owner" OR username=="dvc_owner"

[get_events4identity(2)]
args       = field, value
definition = (user_$field$="$value$" OR src_user_$field$="$value$" OR (host_owner_$field$="$value$" NOT sourcetype=stash) OR orig_host_owner_$field$="$value$" OR src_owner_$field$="$value$" OR dest_owner_$field$="$value$" OR dvc_owner_$field$="$value$")
errormsg   = field (arg1) must be one of identity, prefix, nick, first, last, suffix, email, phone, phone2, managedBy, priority, bunit, category, watchlist, startDate, or endDate
iseval     = 0
validation = field=="identity" OR field=="prefix" OR field=="nick" OR field=="first" OR field=="last" OR field=="suffix" OR field=="email" OR field=="phone" OR field=="phone2" OR field=="managedBy" OR field=="priority" OR field=="bunit" OR field=="category" OR field=="watchlist" OR field=="startDate" OR field=="endDate"

## Global identity search by string (e.g. e-mail address)
[identity_search(1)]
args       = val
definition = `get_events4identity(identity, "$val$")` OR `get_events4identity(prefix, "$val$")` OR `get_events4identity(nick, "$val$")` OR `get_events4identity(first, "$val$")` OR `get_events4identity(last, "$val$")` OR `get_events4identity(suffix, "$val$")` OR `get_events4identity(email, "$val$")` OR `get_events4identity(phone, "$val$")` OR `get_events4identity(phone2, "$val$")` OR `get_events4identity(managedBy, "$val$")` OR `get_events4identity(priority, "$val$")` OR `get_events4identity(bunit, "$val$")` OR `get_events4identity(category, "$val$")` OR `get_events4identity(watchlist, "$val$")` OR `get_events4identity(startDate, "$val$")` OR `get_events4identity(endDate, "$val$")`
iseval     = false

## Global identity search by first name, last name or vice-versa
[identity_search(2)]
args       = first, last
definition = (`get_events4identity(first, "$first$")` `get_events4identity(last, "$last$")`) OR (`get_events4identity(last, "$first$")` `get_events4identity(first, "$last$")`)
iseval     = false

## startDate/endDate normalization
[iden_mktime]
definition = eval `iden_mktime_meval(startDate)`,`iden_mktime_meval(endDate)`

[iden_mktime(1)]
args       = field
definition = eval `iden_mktime_meval($field$)`

[iden_mktime_meval(1)]
args       = field
definition = "$field$"=case(isnum('$field$'),'$field$',isnum(strptime('$field$',"%m/%d/%Y %H:%M")),strptime('$field$',"%m/%d/%Y %H:%M"),isnum(strptime('$field$',"%m/%d/%y %H:%M")),strptime('$field$',"%m/%d/%y %H:%M"),1=1,'$field$')

## Identity Categories
[identity_categories]
definition = inputlookup append=T category_lookup WHERE category_source="identity" | `lower(category)` | dedup category | sort + category | fields category

## Reverse identity lookup breakdown
## 1. Create a single event.
## 2. Set the key field to the value of the value.
## 3. Perform string-based identity lookup.
## 4. Eliminate the null result case.
## Note: this macro must be prepended by a pipe.
[reverse_identity_lookup(1)]
args       = value
definition = makeresults | eval key="$value$" | lookup update=true identity_lookup_expanded key OUTPUTNEW identity,prefix,nick,first,last,suffix,email,phone,phone2,managedBy,priority,bunit,category,watchlist,startDate,endDate,identity_tag | where isnotnull(identity)

## Identity value generation from identityLookup.conf convention strings
[generate_identities]
definition = eval identity=split(identity, "|") | eval identity=mvappend(identity,email) | eval identity=mvappend(identity,replace(email,"@.*",""))

###### Session Management ######
[session_start]
definition = tag=network tag=session tag=start | fillnull value=unknown dest_ip,dest_mac,dest_nt_host,dest_dns,user

## sessions/session(1) should always be in sync w/ the exception of "where `session_search($bestmatch$)`"
[sessions]
definition = tstats `summariesonly` count from datamodel=Network_Sessions.All_Sessions where nodename=All_Sessions.Session_Start by _time,All_Sessions.dest_ip,All_Sessions.dest_mac,All_Sessions.dest_nt_host,All_Sessions.dest_dns,All_Sessions.user span=1s | `drop_dm_object_name("All_Sessions")` | `unprepend_assets("dest")` | sort 0 - _time | eval startTime=_time | fields _time,ip,mac,nt_host,dns,user,startTime

[sessions(1)]
args       = bestmatch
definition = tstats `summariesonly` count from datamodel=Network_Sessions.All_Sessions where nodename=All_Sessions.Session_Start `session_search("$bestmatch$")` by _time,All_Sessions.dest_ip,All_Sessions.dest_mac,All_Sessions.dest_nt_host,All_Sessions.dest_dns,All_Sessions.user span=1s | `drop_dm_object_name("All_Sessions")` | `unprepend_assets("dest")` | sort 0 - _time | eval startTime=_time | fields _time,ip,mac,nt_host,dns,user,startTime

[session_search(1)]
args       = bestmatch
definition = (All_Sessions.dest_ip="$bestmatch$" OR All_Sessions.dest_mac="$bestmatch$" OR All_Sessions.dest_nt_host="$bestmatch$" OR All_Sessions.dest_dns="$bestmatch$" OR All_Sessions.user="$bestmatch$")

## infer logouts
[infer_logouts(1)]
args       = field
definition = streamstats current=false global=false window=1 first(startTime) as endTime by $field$ | eval endTime=if(isnotnull(endTime),endTime-1,endTime) | fields _time,ip,mac,nt_host,dns,user,startTime,endTime
errormsg   = field (arg1) must be one of ip, mac, nt_host, dns, user
iseval     = 0
validation = field=="ip" OR field=="mac" OR field=="nt_host" OR field=="dns" OR field=="user"
